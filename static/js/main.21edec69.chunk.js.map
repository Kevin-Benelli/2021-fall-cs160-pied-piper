{"version":3,"sources":["pics/logo.png","components/login.js","components/userdropdown.js","components/searchbar.js","components/header.js","pics/loading.gif","components/chart.js","components/chartpage.js","components/settingspage.js","components/chat.js","components/socketclient.js","App.js","utils/storage.js","reportWebVitals.js","index.js"],"names":["Login","props","setLoggedInUsername","useState","username","setUsername","showPassword","setShowPassword","password","setPassword","errorMsg","setErrorMsg","postAction","e","action","a","preventDefault","axios","post","then","response","data","error","message","console","log","lockButton","content","placement","icon","intent","Intent","WARNING","minimal","onClick","login","className","placeholder","onChange","target","value","rightElement","type","style","color","Colors","RED1","marginTop","PRIMARY","text","tabIndex","UserDropdown","loggedInUsername","dropdown","basename","document","body","classList","toggle","to","event","window","location","href","SearchBar","query","setQuery","goToTicker","url","open","searchButton","onSubmit","leftElement","Header","align","Alignment","LEFT","src","logo","alt","RIGHT","dateForm","Intl","DateTimeFormat","timeStyle","hour12","dateStyle","Chart","input","days","months","years","chartData","setChartData","setError","loaded","setLoaded","resolution","setResolution","symbol","ticker","toUpperCase","now","Date","getFullYear","getMonth","Math","min","getDate","floor","getTime","from","setFrom","setTo","useEffect","get","params","timePickerProps","showArrowButtons","useAmPm","width","height","date","timePrecision","TimePrecision","SECOND","format","selected","StockChart","draw","ctx","frameCount","white","timeTextColor","canvas","candlesAndTimeAreaWidth","pricesAreaHeight","clearRect","fillStyle","fillRect","pricesAreaPos","font","fontSize","topPriceHeight","botPriceHeight","prices","getDisplayedPrices","lastHeight","textAlign","i","length","price","x","pricesAreaWidth","y","abs","fillText","toFixed","candles","amtOfCandles","candleWidth","stickWidth","max","lastPos","candleInfo","close","high","low","timestamp","openHeight","getHeightOfPrice","closeHeight","highHeight","lowHeight","candleColor","candlePos","actCandleWidth","stickPos","push","xRange","middlePos","includes","getMinutes","strDate","toLocaleDateString","undefined","month","toTimeString","slice","timeAreaHeight","day","year","state","mouseX","mouseY","setLineDash","strokeStyle","beginPath","moveTo","lineTo","stroke","minimumDistance","Number","MAX_SAFE_INTEGER","hoverCandle","candle","distance","mouseDate","infoFrom","infoTo","infoStr","computed","curr","ceil","zoomLevel","updateMousePos","canvasX","canvasY","setState","this","Fragment","loadingGif","React","Component","Canvas","rest","canvasRef","useRef","current","addEventListener","cRect","getBoundingClientRect","round","clientX","left","clientY","top","animationFrameId","context","getContext","render","requestAnimationFrame","cancelAnimationFrame","ref","ChartPage","useParams","SettingsPage","newUsername","setNewUsername","newValues","usernameToUpdate","defaultValue","updateSettings","Chat","socket","chatroom","userMessage","setUserMessage","messageLog","setMessageLog","sendMessage","messageData","author","time","getHours","getSeconds","emit","prevMessageLog","on","map","messageContent","id","onKeyPress","key","io","SocketClient","userName","chatRoom","setChatRoom","showChatBox","setShowChatBox","App","homePage","setHomePage","stickyValue","localStorage","getItem","JSON","parse","setValue","setItem","stringify","useStickyState","path","children","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.21edec69.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.7f424a7c.png\";","import React from 'react'\nimport { useState } from 'react';\nimport axios from 'axios'\nimport { Button, InputGroup, Intent } from '@blueprintjs/core';\nimport { Placement, Popover2, Tooltip2 } from '@blueprintjs/popover2';\nimport { Colors } from \"@blueprintjs/core\";\nimport './login.css';\nimport { setLocalStorageItem } from 'utils/storage';\n\nexport const Login = (props) => {\n  let { setLoggedInUsername } = props;\n\n  const [username, setUsername] = useState(\"\"); // init to empty string\n  const [showPassword, setShowPassword] = useState(false);\n  const [password, setPassword] = useState(\"\"); // init to empty string\n  const [errorMsg, setErrorMsg] = useState(null); // init to empty string\n\n\n  // Post username and password for login/account creation to express backend\n  async function postAction(e, action){\n    e.preventDefault() // don't refresh form on submit\n    try{\n        axios.post(`http://localhost:5001/post_${action}`, {\n          username,\n          password\n        }).then((response) => {\n            // response.data holds a message string and an error boolean\n            if(response.data.error) {\n              setErrorMsg(response.data.message);\n            } else {\n              setErrorMsg(null);\n              setLoggedInUsername(username)\n            }\n        });\n    }catch(error){\n        console.log('Yo something went wrong: %s', error)\n    }\n  }\n\n  function handleLockClick() {\n    setShowPassword(!showPassword);\n  }\n\n  const lockButton = (\n    <Tooltip2 content={`${showPassword ? \"Hide\" : \"Show\"} Password`}\n              placement=\"right\"\n              >\n        <Button\n            icon={showPassword ? \"unlock\" : \"lock\"}\n            intent={Intent.WARNING}\n            minimal={true}\n            onClick={handleLockClick}\n            />\n    </Tooltip2>\n);\n\n  let login = (\n    <div className=\"login center\">\n      <form> \n        <InputGroup className=\"username\"\n                    placeholder=\"Username\"\n                    onChange={(e) => setUsername(e.target.value)}\n                    value={username}\n                    />\n        <InputGroup className=\"password\"\n                    placeholder=\"Password\"\n                    onChange={(e) => setPassword(e.target.value)}\n                    value={password}\n                    rightElement={lockButton}\n                    type={showPassword ? \"text\" : \"password\"}\n                    />\n        <Button className=\"login-submit\"\n                onClick={ e => {\n                  postAction(e, \"login\");\n                }}> Login </Button>\n        <Button className=\"create-account-submit\"\n                onClick={ e => {\n                  postAction(e, \"create_account\");\n                }}> Create Account </Button>\n        <div style={{\n            color: Colors.RED1,\n            marginTop: \"5px\"\n          }}>{errorMsg}</div>\n      </form>\n    </div>\n  );\n\n  return (\n    <Popover2 placement=\"bottom\" content={ login } >\n      <Button intent={Intent.PRIMARY} icon=\"log-in\" text=\"Login\" tabIndex={0} />\n    </Popover2>\n  )\n}","import React from 'react'\nimport { Button, Intent } from '@blueprintjs/core';\nimport { Popover2 } from '@blueprintjs/popover2';\nimport './userdropdown.css';\nimport { clearLocalStorageItem } from 'utils/storage';\nimport {\n  HashRouter,\n  Route,\n  NavLink\n} from \"react-router-dom\";\n\nexport const UserDropdown = (props) => {\n  let { loggedInUsername, setLoggedInUsername } = props;\n\n  function logout(e) {\n    setLoggedInUsername(null);\n  }\n\n  function lightModeToggle() {\n    var element = document.body;\n    element.classList.toggle(\"light-mode\");\n  }\n\n  let dropdown = (\n    \n    <div className=\"userdropdown center\">\n\n      <HashRouter basename=\"/\">\n\n      <Button className=\"toggle\" // Creates the toggle button for light mode\n                onClick={ lightModeToggle }> Light Mode Toggle </Button><br/>\n                \n      { /* Creates the settings button and goes back home */ }\n      <NavLink to = {'/'}>\n        <Button>Home</Button><br/>\n      </NavLink>\n\n      { /* Creates the settings button and goes to the settings page */ }\n      <NavLink to = {'/settings'}>\n        <Button>Settings</Button><br/>\n      </NavLink>\n\n      { /* Creates the chat button and goes to the chat page */ }\n      <NavLink to = {'/chat'}>\n        <Button>Chat</Button><br/> \n      </NavLink>\n\n      <Button className=\"mystery\" // ???\n                onClick={ event => window.location.href=\"https://www.youtube.com/watch?v=dQw4w9WgXcQ\" }> FREE BITCOIN CLICK HERE!! </Button><br/>\n\n      <Button className=\"logout\" // Creates the logout button\n                onClick={ logout }> Logout </Button><br/>\n      To be continued\n      </HashRouter>\n    </div>\n  );\n\n  return (\n    <Popover2 placement=\"bottom\" content={ dropdown } >\n      <Button intent={Intent.PRIMARY} icon=\"user\" text={ loggedInUsername } tabIndex={0} />\n    </Popover2>\n  )\n}\n","import React, { useState } from 'react'\nimport { Button, InputGroup } from '@blueprintjs/core';\nimport './searchbar.css';\n\n\n\nexport const SearchBar = () => {\n  const [query, setQuery] = useState(\"\"); // init to empty string\n\n  function goToTicker(e) {\n    let url = `/2021-fall-cs160-pied-piper/#/ticker/${query}`;\n    console.log(url)\n    window.open(url, \"_self\");\n  }\n\n  const searchButton = (\n    <Button\n        icon={\"search\"}\n        minimal={true}\n        onClick={goToTicker}\n        />\n  );\n\n  return (\n    <div className=\"search-bar\">\n      <form onSubmit={ goToTicker }>\n        <InputGroup className=\"search-input\"\n                    placeholder=\"Search\"\n                    leftElement={ searchButton }\n                    onChange={(e) => setQuery(e.target.value)}\n                    />\n      </form>\n    </div>\n  )\n} ","import React, { useState } from 'react'\nimport { Alignment, Navbar, NavbarGroup } from '@blueprintjs/core';\nimport logo from '../pics/logo.png';\nimport { Login } from './login';\nimport './header.css'\nimport { UserDropdown } from './userdropdown';\nimport { SearchBar } from './searchbar';\nimport { NavLink } from 'react-router-dom';\n\nexport const Header = (props) => {\n  let { loggedInUsername, setLoggedInUsername } = props;\n\n  return (\n    <div className=\"center\">\n      <div className=\"header\">\n        <Navbar className=\"header-navbar\">\n          <NavbarGroup align={ Alignment.LEFT }>\n            <NavLink to=\"/\">\n              <img src={logo} className=\"header-logo\" alt=\"logo\" />\n            </NavLink>\n          </NavbarGroup>\n\n          <NavbarGroup align={ Alignment.RIGHT }>\n            <SearchBar/>\n            { loggedInUsername && \n              <UserDropdown loggedInUsername={loggedInUsername}\n                            setLoggedInUsername={setLoggedInUsername}/>\n            }\n            { !loggedInUsername &&\n              <Login setLoggedInUsername={setLoggedInUsername}/>\n            }\n          </NavbarGroup>\n          \n        </Navbar>\n      </div>\n    </div>\n  )\n} ","export default __webpack_public_path__ + \"static/media/loading.60616635.gif\";","import './chart.css';\nimport loadingGif from \"../pics/loading.gif\";\nimport React, { useRef, useEffect, useState } from \"react\";\nimport axios from 'axios';\nimport { Button, Label, Popover } from '@blueprintjs/core';\nimport { DatePicker, TimePrecision } from '@blueprintjs/datetime';\nimport { Popover2 } from '@blueprintjs/popover2';\n\n// Helpers\n\n// Date stuff\nfunction deltaDate(input, days, months, years) {\n  return new Date(\n    input.getFullYear() + years,\n    input.getMonth() + months,\n    Math.min(\n      input.getDate() + days,\n      new Date(\n        input.getFullYear() + years,\n        input.getMonth() + months + 1,\n        0\n      ).getDate()\n    )\n  );\n}\nlet dateForm = new Intl.DateTimeFormat(\"en\", {\n  timeStyle: \"short\",\n  hour12: false,\n  dateStyle: \"short\"\n});\n\n// Range stuff\n// from and to are 2 number arrays, s is the number to map\nfunction mapRange(from, to, s) {\n  return to[0] + ((s - from[0]) * (to[1] - to[0])) / (from[1] - from[0]);\n}\n// range is an increasing 2 number array\nfunction isInRangeInclusive(x, range) {\n  return x >= range[0] && x <= range[1];\n}\nfunction isInRangeExclusive(x, range) {\n  return x > range[0] && x < range[1];\n}\n\n// Stock chart component\nexport const Chart = (props) => {\n  // Chart data from Finnhub\n  let [chartData, setChartData] = useState(null);\n  // Error msg\n  let [error, setError] = useState(null);\n  // Loaded state, used to show loading gif\n  let [loaded, setLoaded] = useState(false);\n  let width = \"800px\";\n  let height = \"500px\";\n  // Candle resolution - Either \"1\", \"5\", \"15\", \"30\", \"60\", \"D\", \"W\", or \"M\"\n  let [resolution, setResolution] = useState(\"30\");\n  let symbol = props.ticker.toUpperCase();\n\n  // Start 1 day ago, end today by default.\n  let now = new Date();\n  let then = deltaDate(now, -1, 0, 0);\n  let [from, setFrom] = useState(Math.floor(then.getTime() / 1000)); // Need to / 1000 or * 1000 throughout to account for javascript Unix time being in milliseconds, but Finnhub using seconds.  \n  let [to, setTo] = useState(Math.floor(now.getTime() / 1000));\n\n  // Call backend to get chart data\n  // TODO: Call backend to get setting defaults\n  useEffect(() => {\n    axios.get(\"http://localhost:5001/chart_data\", { \n      params: {\n        resolution: resolution,\n        symbol: symbol,\n        from: from,\n        to: to\n      } \n    }).then((response) => {\n      setChartData(response.data.chartData);\n      setError(response.data.error);\n      setLoaded(true);\n    })\n  }, [resolution, symbol, from, to]);\n\n  // Callbacks for datetime pickers\n  let handleFromChange = (date) => {\n    setFrom(Math.floor(date.getTime() / 1000));\n  }\n  let handleToChange = (date) => {\n    setTo(Math.floor(date.getTime() / 1000));\n  }\n  let timePickerProps = {\n    showArrowButtons: true,\n    useAmPm: false,\n  }\n\n  return (\n    <div className=\"chartArea center\">\n      <div className=\"chart\">\n        <StockChart\n          chartData={chartData}\n          error={error}\n          loaded={loaded}\n          width={width}\n          height={height}\n          symbol={symbol}\n          resolution={resolution}\n          from={from}\n          to={to}\n        />\n      </div>\n      { /* If we're done loading, and there's no error, display the chart settings */ }\n      {loaded && error === null && (\n        <div className=\"chartSettings\">\n          { /* Inputs that change resolution, from, and to dates */ }\n          <Label>\n            From:\n            <Popover2 placement=\"top\"\n                      content={\n                        <DatePicker className=\"chart-from-datepicker\"\n                                    onChange={handleFromChange}\n                                    timePickerProps={timePickerProps}\n                                    timePrecision={TimePrecision.SECOND}\n                                    />\n                      }>\n                <Button text={ dateForm.format(from * 1000) }/>\n            </Popover2>\n          </Label>\n          <Label>\n            To:\n            <Popover2 placement=\"top\"\n                      content={\n                        <DatePicker className=\"chart-from-datepicker\"\n                                    onChange={handleToChange}\n                                    timePickerProps={timePickerProps}\n                                    timePrecision={TimePrecision.SECOND}\n                                    />\n                      }>\n                <Button text={ dateForm.format(to * 1000) }/>\n            </Popover2>\n          </Label>\n          <Label>\n            Resolution: { /* Either \"1\", \"5\", \"15\", \"30\", \"60\", \"D\", \"W\", \"M\" */ }\n            <div className=\"bp3-html-select chart-resolution\">\n              <select className=\"chart-resolution-select\"\n                      onChange={(e) => setResolution(e.target.value)}\n                      >\n                <option value=\"1\">1</option>\n                <option value=\"5\">5</option>\n                <option value=\"15\">15</option>\n                <option value=\"30\" selected>30</option>\n                <option value=\"60\">60</option>\n                <option value=\"D\">D</option>\n                <option value=\"W\">W</option>\n                <option value=\"M\">M</option>\n              </select>\n              <span className=\"bp3-icon bp3-icon-double-caret-vertical\"></span>\n            </div>\n          </Label>\n        </div>\n      )}\n    </div>\n  );\n}\n\nclass StockChart extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      zoomLevel: 1, // TODO\n      mouseX: null,\n      mouseY: null\n    };\n  }\n\n  // Called every frame by the underlying canvas element\n  // Something drawn later in the draw loop will be on top of things drawn before it - like a real painting \n  // So order matters (when we care about things being drawn on top of other things)\n  draw = (ctx, frameCount) => {\n    // Color palette\n    let white = \"#ffffff\";\n    let gray = \"#808080\";\n\n    let bgColor = \"#222222\";\n    let pricesAreaSeparatorColor = \"#2b2b43\";\n    let posCandleColor = \"#26a69a\";\n    let negCandleColor = \"#ee5350\";\n    let evenCandleColor = gray;\n    let pricesTextColor = white;\n    let timeTextColor = white;\n    let infoTextColor = white;\n    let mouseLinesColor = \"#758696\";\n    let mouseTimeBGColor = \"#808080\";\n\n    // Widths and heights\n    let width = ctx.canvas.width;\n    let height = ctx.canvas.height;\n    let pricesAreaWidth = 60;\n    let candlesAndTimeAreaWidth = width - pricesAreaWidth;\n    let timeAreaHeight = 40;\n    let pricesAreaHeight = height - timeAreaHeight;\n\n    // Draw Background\n    ctx.clearRect(0, 0, width, height);\n    ctx.fillStyle = bgColor;\n    ctx.fillRect(0, 0, width, height);\n\n    // Draw Prices Area\n    let pricesAreaPos = width - pricesAreaWidth;\n    let pricesAreaSeparatorWidth = 2;\n    ctx.fillStyle = pricesAreaSeparatorColor;\n    ctx.fillRect(pricesAreaPos, 0, pricesAreaSeparatorWidth, height);\n\n    ctx.fillStyle = pricesTextColor;\n    let fontSize = 15;\n    let pricePadding = 10;\n    ctx.font = fontSize + \"px Georgia\";\n    let topPadding = 5;\n    let prices = this.getDisplayedPrices();\n\n    let topPriceHeight, botPriceHeight;\n    let lastHeight = 0;\n    ctx.textAlign = \"center\";\n    // Loop thru prices and draw them \n    for (let i = 0; i < prices.length; i++) {\n      let price = prices[i];\n      let x = pricesAreaPos + pricesAreaWidth / 2;\n      let y = (pricesAreaHeight / prices.length) * i + fontSize + topPadding;\n      if (i === 0) topPriceHeight = y;\n      else if (i === prices.length - 1) botPriceHeight = y;\n      if (Math.abs(y - lastHeight) >= fontSize + pricePadding) { // Only draw if we won't overlap\n        ctx.fillText(price.toFixed(2), x, y);\n        lastHeight = y;\n      }\n    }\n\n    // Candles Area\n    let candles = this.props.chartData.candles;\n    let amtOfCandles = candles[\"c\"].length;\n    let rightPadding = 40;\n    let leftRightMargin = 5;\n    let candleWidth = (candlesAndTimeAreaWidth - rightPadding) / amtOfCandles;\n    let stickWidth = Math.max(candleWidth / 20, 1);\n    let lastPos = 0;\n    let minTimeWidth = 50; // Minimum width of drawn time in pixels\n    let candleInfo = [];\n    // Loop thru candles\n    for (let i = 0; i < amtOfCandles; i++) {\n      let open = candles[\"o\"][i];\n      let close = candles[\"c\"][i];\n      let high = candles[\"h\"][i];\n      let low = candles[\"l\"][i];\n      let timestamp = candles[\"t\"][i];\n      let volume = candles[\"v\"][i];\n\n      // Calculate pixel heights, relative to canvas, of open, close, high, and low prices\n      let openHeight = this.getHeightOfPrice(\n        open,\n        topPriceHeight,\n        botPriceHeight\n      );\n      let closeHeight = this.getHeightOfPrice(\n        close,\n        topPriceHeight,\n        botPriceHeight\n      );\n      let highHeight = this.getHeightOfPrice(\n        high,\n        topPriceHeight,\n        botPriceHeight\n      );\n      let lowHeight = this.getHeightOfPrice(\n        low,\n        topPriceHeight,\n        botPriceHeight\n      );\n\n      // Change color based on price moving up, down, or flat thru the candle range\n      let candleColor;\n      if (open < close) {\n        candleColor = posCandleColor;\n      } else if (open > close) {\n        candleColor = negCandleColor;\n      } else {\n        candleColor = evenCandleColor;\n      }\n\n      ctx.fillStyle = candleColor;\n      let candlePos = i * candleWidth + leftRightMargin;\n      let actCandleWidth = candleWidth - leftRightMargin;\n      let stickPos = candlePos + actCandleWidth / 2 - stickWidth / 2;\n      // Draw the candle\n      ctx.fillRect(\n        candlePos,\n        Math.min(openHeight, closeHeight),\n        actCandleWidth,\n        Math.abs(openHeight - closeHeight)\n      );\n      // Draw the stick in the middle of the candle\n      ctx.fillRect(stickPos, highHeight, stickWidth, lowHeight - highHeight);\n\n      // Push given/calculated info about the candle to an array so we don't have to recalculate it later and its all in one place - not used for much right now besides mouse hovering\n      candleInfo.push({\n        timestamp: timestamp,\n        close: close,\n        closeHeight: closeHeight,\n        open: open,\n        openHeight: openHeight,\n        high: high,\n        highHeight: highHeight,\n        low: low,\n        lowHeight: lowHeight,\n        xRange: [candlePos, candlePos + actCandleWidth],\n        middlePos: stickPos,\n      });\n\n      // Time Area\n      let date = new Date(timestamp * 1000);\n      // Draw the time differently based on resolution\n      if([\"1\", \"5\", \"15\", \"30\", \"60\"].includes(this.props.resolution)) { // Hour/minute\n        let increment = 5;\n        if (\n          date.getMinutes() % increment === 0 &&\n          Math.abs(stickPos - lastPos) >= minTimeWidth // Only draw if we won't overlap\n        ) {\n          ctx.fillStyle = timeTextColor;\n          let strDate;\n          if (date.getDate() === 0) {\n            strDate = date.toLocaleDateString(undefined, { month: \"short\" });\n          } else {\n            strDate = date.toTimeString().slice(0, 5);\n          }\n          ctx.fillText(strDate, stickPos, height - timeAreaHeight / 2); // Draw time underneath the candlestick\n          lastPos = stickPos; // Track last x position to avoid overlapping\n        }\n      } else {\n        if (Math.abs(stickPos - lastPos) >= minTimeWidth) { // Only draw if we won't overlap\n          ctx.fillStyle = timeTextColor;\n          let strDate;\n          if (date.getDate() === 0) {\n            strDate = date.toLocaleDateString(undefined, { month: \"short\" });\n          } else {\n            if([\"D\", \"W\"].includes(this.props.resolution)) { // Day/month\n              strDate = date.toLocaleDateString('en-US', { day: 'numeric', month: 'numeric' });\n            } else if(\"M\" === this.props.resolution) { // Month/year\n              strDate = date.toLocaleDateString('en-US', { month: 'short', year: \"2-digit\" });\n            }\n          }\n          ctx.fillText(strDate, stickPos, height - timeAreaHeight / 2); // Draw time underneath the candlestick\n          lastPos = stickPos; // Track last x position to avoid overlapping\n        }\n      }\n    }\n\n    // Interactive Bits\n    // Mouse hover crosshair\n    let { mouseX, mouseY } = this.state;\n    if (mouseX && mouseY) { // If we're hovering over the canvas\n      // Draw dashed crosshair centered at mouse\n      ctx.setLineDash([8, 6]);\n      ctx.strokeStyle = mouseLinesColor;\n      ctx.beginPath();\n      ctx.moveTo(mouseX, mouseY);\n      ctx.lineTo(0, mouseY);\n      ctx.stroke();\n      ctx.beginPath();\n      ctx.moveTo(mouseX, mouseY);\n      ctx.lineTo(candlesAndTimeAreaWidth, mouseY); // Doesn't go into prices area\n      ctx.stroke();\n      ctx.beginPath();\n      ctx.moveTo(mouseX, mouseY);\n      ctx.lineTo(mouseX, 0);\n      ctx.stroke();\n      ctx.beginPath();\n      ctx.moveTo(mouseX, mouseY);\n      ctx.lineTo(mouseX, height);\n      ctx.stroke();\n\n      ctx.setLineDash([]); // Stop drawing dashed lines\n\n      // Find closest candle to mouse\n      let minimumDistance = Number.MAX_SAFE_INTEGER;\n      let hoverCandle = null;\n      for(let candle of candleInfo) {\n        let distance = Math.abs(mouseX - candle.middlePos);\n        if (distance < minimumDistance) {\n          minimumDistance = distance;\n          hoverCandle = candle;\n        }\n      }\n\n      // Draw info about the candle underneath the crosshair\n      if (hoverCandle) { // If we're hovering over a candle\n        let { timestamp, open, close, low, high } = hoverCandle;\n        let mouseDate = new Date(timestamp * 1000);\n        ctx.fillStyle = \"green\";\n        ctx.textAlign = \"left\";\n        ctx.fillText(\n          \"Time: \" +\n            dateForm.format(mouseDate) +\n            \", Open: \" +\n            open.toFixed(2) +\n            \", Close: \" +\n            close.toFixed(2) +\n            \", Low: \" +\n            low.toFixed(2) +\n            \", High: \" +\n            high.toFixed(2),\n          5,\n          40\n        );\n      }\n    }\n\n    // Draw info about current ticker and settings\n    ctx.fillStyle = infoTextColor;\n    ctx.textAlign = \"left\";\n    let infoFrom = new Date(this.props.from * 1000);\n    let infoTo = new Date(this.props.to * 1000);\n    let infoStr =\n      this.props.symbol +\n      \" from \" +\n      dateForm.format(infoFrom) +\n      \" to \" +\n      dateForm.format(infoTo) +\n      \", Resolution: \" +\n      this.props.resolution;\n    ctx.fillText(infoStr, 5, fontSize + 5);\n  };\n\n  // Convert price to height, given the top and bottom price height (relative to the canvas)\n  getHeightOfPrice = (price, topPriceHeight, botPriceHeight) => {\n    let { max, min } = this.props.chartData.computed;\n    // Given two ranges: min price-max price, and bottom height-top height, where would a given price be? Map one range to another\n    return mapRange([min, max], [botPriceHeight, topPriceHeight], price);\n  };\n\n  // Generate an array of displayed price values for the chart\n  getDisplayedPrices = () => {\n    let { max, min } = this.props.chartData.computed;\n    // let zoomLevel = this.state.zoomLevel; // TODO\n    let zoomLevel = 1;\n    let defaultStep = 1;\n\n    let prices = [];\n    // Start at max price, go down step by step until we hit min price\n    // Will always include max and min\n    for (\n      let curr = Math.ceil(max);\n      curr > min;\n      curr -= zoomLevel * defaultStep\n    ) {\n      prices.push(curr);\n    }\n    prices.push(Math.floor(min));\n    return prices;\n  };\n\n  // Keep track of mouse position\n  updateMousePos = (canvasX, canvasY) => {\n    this.setState({\n      mouseX: canvasX,\n      mouseY: canvasY\n    });\n  };\n\n  render() {\n    let { width, height, loaded, error } = this.props;\n\n    return (\n      <div className=\"center\">\n        <div className=\"chart\" style={{ width: width, height: height }}>\n        { /* If we're done loading, and there's no error, display the canvas */ }\n          {loaded && error === null && (\n            <Canvas\n              draw={this.draw}\n              width={width}\n              height={height}\n              style={{\n                width: width,\n                height: height\n                // border: \"1px solid green\"\n              }}\n              updateMousePos={this.updateMousePos}\n            />\n          )}\n          { /* If we're done loading, but there's an error, display the error */ }\n          {loaded && error !== null && (\n            <React.Fragment> { /* React.Fragment is just a way to wrap multiple child components without adding another actual component onto the rendered page. When doing conditional rendering like this you can only have one component in the ( ) section */ }\n              <div> \n                Error 404: ticker not found\n              </div>\n              <div> \n                More info: {error}\n              </div>\n            </React.Fragment>\n          )}\n          { /* If we're  still loading, show a loading spinner */ }\n          {!loaded && <img src={loadingGif} alt=\"Loading...\" />}\n        </div>\n      </div>\n    );\n  }\n}\n\nconst Canvas = (props) => {\n  const { updateMousePos, draw, ...rest } = props;\n  const canvasRef = useRef(null);\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    canvas.addEventListener(\"mousemove\", function (e) {\n      var cRect = canvas.getBoundingClientRect(); // Gets CSS pos, and width/height\n      var canvasX = Math.round(e.clientX - cRect.left); // Subtract the 'left' of the canvas\n      var canvasY = Math.round(e.clientY - cRect.top); // from the X/Y positions to make\n      updateMousePos(canvasX, canvasY);\n    });\n    canvas.addEventListener(\"mouseleave\", function (e) {\n      updateMousePos(null, null);\n    });\n    const context = canvas.getContext(\"2d\");\n    let frameCount = 0;\n    let animationFrameId;\n\n    const render = () => {\n      frameCount++;\n      draw(context, frameCount);\n      animationFrameId = window.requestAnimationFrame(render);\n    };\n    render();\n\n    return () => {\n      window.cancelAnimationFrame(animationFrameId);\n    };\n  }, [draw]);\n\n  return <canvas ref={canvasRef} {...rest} />;\n};","import './chartpage.css';\nimport React from 'react'\nimport { useParams } from \"react-router-dom\";\nimport { Chart } from './chart';\n\nexport const ChartPage = () => {\n  const { ticker } = useParams(); \n\n  return (\n    <Chart ticker={ticker}/>\n  )\n}","import React from 'react'\nimport { useState } from 'react';\nimport { Button, Colors, InputGroup, Intent } from '@blueprintjs/core';\nimport { Alignment, Navbar, NavbarGroup } from '@blueprintjs/core';\nimport axios from 'axios'\nimport './settingspage.css'\n\n\nexport const SettingsPage = (props) => {\n  \n  let {loggedInUsername, setLoggedInUsername } = props; \n  const [newUsername, setNewUsername] = useState(null);\n  const [showPassword, setShowPassword] = useState(false);\n  const [password, setPassword] = useState(null); // init to empty string\n  const [errorMsg, setErrorMsg] = useState(null); // init to empty string\n\n  async function updateSettings(e){\n    e.preventDefault() // don't refresh form on submit\n    try{\n      let newValues = {\n        username: newUsername,\n        password: password,\n        } \n        axios.post(`http://localhost:5001/post_update_account`, {\n          usernameToUpdate: loggedInUsername,\n          newValues: newValues,\n        }).then((response) => {\n            // response.data holds a message string and an error boolean\n            if(response.data.error) {\n              setErrorMsg(response.data.message);\n            } else {\n              setErrorMsg(null);\n              if(newValues.username)\n                setLoggedInUsername(newUsername)\n            }\n        });\n    }catch(error){\n        console.log('Yo something went wrong: %s', error)\n    }\n  }\n\n  return (\n    <div className=\"settings\">\n      <h1>Account Info</h1>\n      <form> \n        <InputGroup className=\"username\"\n                    placeholder=\"Username\"\n                    onChange={(e) => setNewUsername(e.target.value)}\n                    defaultValue={loggedInUsername}\n                    \n                    />\n        <InputGroup className=\"password\"\n                    placeholder=\"Password\"\n                    onChange={(e) => setPassword(e.target.value)}\n                    type={showPassword ? \"text\" : \"password\"}\n                    />\n        <Button className=\"update-account-submit\"\n                onClick={ e => {\n                  updateSettings(e);\n                }}> Update Info </Button>\n        <div style={{\n          color: Colors.RED1,\n          marginTop: \"5px\"\n        }}>{errorMsg}</div>\n      </form>\n    </div>\n  )\n} ","import React from 'react'\nimport { useState, useEffect } from 'react'\nimport ScrollToBottom from 'react-scroll-to-bottom';\nexport const Chat = ({socket, username, chatroom}) => {\n    const [userMessage, setUserMessage] = useState(\"\");\n    const [messageLog, setMessageLog] = useState([]);\n\n    const resetInputField = () => {\n      setUserMessage(\"\");\n    };\n\n    const sendMessage = async () => {\n      // If user drafts a message then set message for emission\n      if (userMessage !== \"\"){\n        // messageData provides more details about message like time\n        const messageData = {\n          chatroom: chatroom, // stores specific chatroom\n          author: username, // maps message to user name\n          message: userMessage, // sets messsage to message drafted\n           // gets time stamp by hours and minutes\n          time: \n          new Date(Date.now()).getHours() + \n          \":\" + \n          new Date(Date.now()).getMinutes() + \n          \":\" + \n          new Date(Date.now()).getSeconds(),\n        };\n\n        // Wait for message to be sent before continuing to move forward so make it asyncronous\n        // emits message data object to messaging server\n        await socket.emit(\"send_message\", messageData);   \n        \n        // When we send a message we store our message in the chat log\n        setMessageLog((prevMessageLog) => [...prevMessageLog, messageData])\n      }\n    };\n\n    // Listens to whenever there is a change in socket server\n    useEffect(() => {\n      // listen to receive_message event and create call back function to handle message on client\n      // grab data from backend (data)\n      socket.on(\"receive_message\", (data) => {\n        console.log(data);\n        // whenever someone emmit a message it sets message log to what ever it was before plus the new message\n        setMessageLog((prevMessageLog) => [...prevMessageLog, data])\n      });\n      \n      \n    }, [socket]);\n\n    return( \n    \n    <div> \n      <div className=\"chat-room-window\"> \n      <div className=\"chat-room-header-title\">\n        <p> Live Chat Room for { chatroom.toUpperCase() } </p>\n      </div>\n      \n      \n      <div className=\"chat-room-body\"> \n        <ScrollToBottom className=\"message-container\">\n          { \n            // for each element in message list return <h1> message </h1>\n            messageLog.map((messageContent) => {\n              return (\n\n                // access ids: user-self and user-other to sytle the user respectivley. \n                // user-self should be left centered and user-other should be on right\n                <div className=\"message\" \n                id={username === messageContent.author ? \"user-self\" : \"user-other\"}> \n                <div>\n                  <div className=\"message-content\">\n                    <p>{messageContent.message}</p>\n                  </div>\n                  <div className=\"message-meta\">\n                    <p id=\"sender_and_time\">{messageContent.author} Sent: {messageContent.time}</p>\n                  </div>\n                  </div>\n                </div>\n                );\n              })\n            }\n         </ScrollToBottom>\n      </div>\n      <div className=\"chat-room-footer\">\n        <input \n        className=\"chat-room-footer-message-field\"\n        type=\"text\" \n        placeholder=\"Lets Talk Stocks...\"\n        onChange={(event) => {\n          setUserMessage(event.target.value)\n        }}\n        onKeyPress={(event) => {\n          // If user types message and presses enter then send the message \n          event.key === \"Enter\" && sendMessage() \n        }}\n        />\n        <button onClick={sendMessage}>&#9658;</button>\n        {/*  &#9658; is a message send icon button */}\n      </div>\n    </div>\n    </div>\n    );\n  \n} ","import React from 'react'\nimport \"./socketclient.css\"\nimport { io } from 'socket.io-client'\nimport { useState } from 'react'\nimport { Chat } from './chat'\nconst ENDPOINT = \"http://localhost:5001\";\nconst socket = io(ENDPOINT);\n\nexport const SocketClient = () => {\n  const [userName, setUsername] = useState(\"\");\n  const [chatRoom, setChatRoom] = useState(\"\");\n  const [showChatBox, setShowChatBox] = useState(false);\n\n\n  // function emit socket event to join room. \n  const joinRoom = () => {\n    // GET HASHSET AND CHECK IF CHATROOM TICKER EXISTS IN TICKER SET; ELSE ERROR MESSAGE\n    if(userName !== \"\" && chatRoom !== \"\"){\n      socket.emit(\"join_chat_room\", chatRoom);\n      setShowChatBox(true);\n    }\n  };\n\n  return (\n    <div className=\"center\">\n      {/* If chat box is not displayed show enter chat room; else show chat box */}\n      {!showChatBox ? (\n        <div className=\"joinChatRoom\">\n          <h3> Join Stocked Chat Room Now! </h3>\n            <input \n            className=\"joinChatInputField\"\n            type=\"text\" \n            placeholder=\"Enter Name\" \n            onChange={(event) => {\n              setUsername(event.target.value.toUpperCase());\n            }}/>\n            <input \n            className=\"joinChatInputField\"\n            type=\"text\" \n            placeholder=\"Enter Ticker\" \n            onChange={(event) => {\n              setChatRoom(event.target.value.toUpperCase());\n            \n            }}/>\n            \n            <button className=\"joinChatRoomButton\" onClick={joinRoom}> Join Chat Room </button>        \n        </div>\n      ) : (\n        // Call our chat component and pass in the socket\n        // Keep track of the username and chat room being used so we pass that in as pops\n          <Chat socket={socket} username={userName} chatroom={chatRoom}/>\n      )}\n        \n    </div>\n  );\n} ","import './App.css';\nimport React from 'react'\nimport { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport {\n  HashRouter,\n  Route\n} from \"react-router-dom\";\nimport { Header } from './components/header';\nimport { ChartPage } from './components/chartpage';\nimport { SettingsPage } from './components/settingspage';\nimport { useStickyState } from 'utils/storage';\nimport { SocketClient } from 'components/socketclient';\n\n\nfunction App() {\n  \n  const [homePage, setHomePage] = useState(\"\")\n\n  useEffect(() => {\n    axios.get(\"http://localhost:5001/home\").then((response) => {\n      setHomePage(response.data)\n    })\n  }, []);\n\n  const [loggedInUsername, setLoggedInUsername] = useStickyState(null, \"username\");\n\n  return (\n    \n      <div className=\"center\">\n        <div className=\"App\">\n          <HashRouter basename=\"/2021-fall-cs160-pied-piper\">\n            <Header loggedInUsername={loggedInUsername}\n                    setLoggedInUsername={setLoggedInUsername}/>\n            { loggedInUsername && \n              <div>\n                This div shows when a user is logged in.\n              </div>\n            }\n            { !loggedInUsername && \n              <div>\n                This div shows when there's no logged in user.\n              </div>\n            }\n        \n          \n\n            {/* all routes that look like /ticker/xyz will be handled by the ChartPage component */}\n            <Route path=\"/\" children={homePage} />\n            <Route path=\"/ticker/:ticker\" children={<ChartPage/>} />\n            <Route path=\"/settings\" children={<SettingsPage loggedInUsername={loggedInUsername} setLoggedInUsername={setLoggedInUsername}/>}/>\n            <Route path=\"/chat\" children={<SocketClient />}/>\n\n            {/* <Route path=\"/news/:ticker\" component={<NewsPage} /> */}\n\n\n          </HashRouter>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\n\nconst setLocalStorageItem = (item, data) => {\n  localStorage.setItem(item, JSON.stringify(data));\n}\n\nconst clearLocalStorageItem = (item, data) => {\n  localStorage.setItem(item, null);\n}\n\nconst getLocalStorageItem = (item) => {\n  const rawItem = localStorage.getItem(item);\n  if (rawItem) {\n    try {\n      return JSON.parse(rawItem);\n    } catch {\n      return null;\n    }\n  } else {\n    return null;\n  }\n}\n\n// Based on https://www.joshwcomeau.com/react/persisting-react-state-in-localstorage/\nfunction useStickyState(defaultValue, key) {\n  const [value, setValue] = React.useState(() => {\n    const stickyValue = window.localStorage.getItem(key);\n    return stickyValue !== null\n      ? JSON.parse(stickyValue)\n      : defaultValue;\n  });\n  React.useEffect(() => {\n    window.localStorage.setItem(key, JSON.stringify(value));\n  }, [key, value]);\n  return [value, setValue];\n}\n\nexport { setLocalStorageItem, clearLocalStorageItem, getLocalStorageItem, useStickyState };","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport '../node_modules/normalize.css/normalize.css';\nimport '../node_modules/@blueprintjs/icons/lib/css/blueprint-icons.css';\nimport '../node_modules/@blueprintjs/core/lib/css/blueprint.css';\nimport '../node_modules/@blueprintjs/datetime/lib/css/blueprint-datetime.css';\nimport '../node_modules/@blueprintjs/popover2/lib/css/blueprint-popover2.css';\nimport '../node_modules/@blueprintjs/select/lib/css/blueprint-select.css';\nimport '../node_modules/@blueprintjs/timezone/lib/css/blueprint-timezone.css';\n\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}